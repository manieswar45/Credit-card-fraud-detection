{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6095,"sourceType":"datasetVersion","datasetId":3884}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:07.688824Z","iopub.execute_input":"2025-01-05T06:41:07.689174Z","iopub.status.idle":"2025-01-05T06:41:07.697477Z","shell.execute_reply.started":"2025-01-05T06:41:07.689147Z","shell.execute_reply":"2025-01-05T06:41:07.696122Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/creditcard/creditcard.csv\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/creditcard/creditcard.csv')\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:07.699106Z","iopub.execute_input":"2025-01-05T06:41:07.699358Z","iopub.status.idle":"2025-01-05T06:41:11.039179Z","shell.execute_reply.started":"2025-01-05T06:41:07.699334Z","shell.execute_reply":"2025-01-05T06:41:11.037842Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   Time        V1        V2        V3        V4        V5        V6        V7  \\\n0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n\n         V8        V9  ...       V21       V22       V23       V24       V25  \\\n0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n\n        V26       V27       V28  Amount  Class  \n0 -0.189115  0.133558 -0.021053  149.62      0  \n1  0.125895 -0.008983  0.014724    2.69      0  \n2 -0.139097 -0.055353 -0.059752  378.66      0  \n3 -0.221929  0.062723  0.061458  123.50      0  \n4  0.502292  0.219422  0.215153   69.99      0  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Time</th>\n      <th>V1</th>\n      <th>V2</th>\n      <th>V3</th>\n      <th>V4</th>\n      <th>V5</th>\n      <th>V6</th>\n      <th>V7</th>\n      <th>V8</th>\n      <th>V9</th>\n      <th>...</th>\n      <th>V21</th>\n      <th>V22</th>\n      <th>V23</th>\n      <th>V24</th>\n      <th>V25</th>\n      <th>V26</th>\n      <th>V27</th>\n      <th>V28</th>\n      <th>Amount</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>-1.359807</td>\n      <td>-0.072781</td>\n      <td>2.536347</td>\n      <td>1.378155</td>\n      <td>-0.338321</td>\n      <td>0.462388</td>\n      <td>0.239599</td>\n      <td>0.098698</td>\n      <td>0.363787</td>\n      <td>...</td>\n      <td>-0.018307</td>\n      <td>0.277838</td>\n      <td>-0.110474</td>\n      <td>0.066928</td>\n      <td>0.128539</td>\n      <td>-0.189115</td>\n      <td>0.133558</td>\n      <td>-0.021053</td>\n      <td>149.62</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>1.191857</td>\n      <td>0.266151</td>\n      <td>0.166480</td>\n      <td>0.448154</td>\n      <td>0.060018</td>\n      <td>-0.082361</td>\n      <td>-0.078803</td>\n      <td>0.085102</td>\n      <td>-0.255425</td>\n      <td>...</td>\n      <td>-0.225775</td>\n      <td>-0.638672</td>\n      <td>0.101288</td>\n      <td>-0.339846</td>\n      <td>0.167170</td>\n      <td>0.125895</td>\n      <td>-0.008983</td>\n      <td>0.014724</td>\n      <td>2.69</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>-1.358354</td>\n      <td>-1.340163</td>\n      <td>1.773209</td>\n      <td>0.379780</td>\n      <td>-0.503198</td>\n      <td>1.800499</td>\n      <td>0.791461</td>\n      <td>0.247676</td>\n      <td>-1.514654</td>\n      <td>...</td>\n      <td>0.247998</td>\n      <td>0.771679</td>\n      <td>0.909412</td>\n      <td>-0.689281</td>\n      <td>-0.327642</td>\n      <td>-0.139097</td>\n      <td>-0.055353</td>\n      <td>-0.059752</td>\n      <td>378.66</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>-0.966272</td>\n      <td>-0.185226</td>\n      <td>1.792993</td>\n      <td>-0.863291</td>\n      <td>-0.010309</td>\n      <td>1.247203</td>\n      <td>0.237609</td>\n      <td>0.377436</td>\n      <td>-1.387024</td>\n      <td>...</td>\n      <td>-0.108300</td>\n      <td>0.005274</td>\n      <td>-0.190321</td>\n      <td>-1.175575</td>\n      <td>0.647376</td>\n      <td>-0.221929</td>\n      <td>0.062723</td>\n      <td>0.061458</td>\n      <td>123.50</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.0</td>\n      <td>-1.158233</td>\n      <td>0.877737</td>\n      <td>1.548718</td>\n      <td>0.403034</td>\n      <td>-0.407193</td>\n      <td>0.095921</td>\n      <td>0.592941</td>\n      <td>-0.270533</td>\n      <td>0.817739</td>\n      <td>...</td>\n      <td>-0.009431</td>\n      <td>0.798278</td>\n      <td>-0.137458</td>\n      <td>0.141267</td>\n      <td>-0.206010</td>\n      <td>0.502292</td>\n      <td>0.219422</td>\n      <td>0.215153</td>\n      <td>69.99</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.041792Z","iopub.execute_input":"2025-01-05T06:41:11.042083Z","iopub.status.idle":"2025-01-05T06:41:11.073690Z","shell.execute_reply.started":"2025-01-05T06:41:11.042058Z","shell.execute_reply":"2025-01-05T06:41:11.072630Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 284807 entries, 0 to 284806\nData columns (total 31 columns):\n #   Column  Non-Null Count   Dtype  \n---  ------  --------------   -----  \n 0   Time    284807 non-null  float64\n 1   V1      284807 non-null  float64\n 2   V2      284807 non-null  float64\n 3   V3      284807 non-null  float64\n 4   V4      284807 non-null  float64\n 5   V5      284807 non-null  float64\n 6   V6      284807 non-null  float64\n 7   V7      284807 non-null  float64\n 8   V8      284807 non-null  float64\n 9   V9      284807 non-null  float64\n 10  V10     284807 non-null  float64\n 11  V11     284807 non-null  float64\n 12  V12     284807 non-null  float64\n 13  V13     284807 non-null  float64\n 14  V14     284807 non-null  float64\n 15  V15     284807 non-null  float64\n 16  V16     284807 non-null  float64\n 17  V17     284807 non-null  float64\n 18  V18     284807 non-null  float64\n 19  V19     284807 non-null  float64\n 20  V20     284807 non-null  float64\n 21  V21     284807 non-null  float64\n 22  V22     284807 non-null  float64\n 23  V23     284807 non-null  float64\n 24  V24     284807 non-null  float64\n 25  V25     284807 non-null  float64\n 26  V26     284807 non-null  float64\n 27  V27     284807 non-null  float64\n 28  V28     284807 non-null  float64\n 29  Amount  284807 non-null  float64\n 30  Class   284807 non-null  int64  \ndtypes: float64(30), int64(1)\nmemory usage: 67.4 MB\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"df['Class'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.075650Z","iopub.execute_input":"2025-01-05T06:41:11.076036Z","iopub.status.idle":"2025-01-05T06:41:11.086684Z","shell.execute_reply.started":"2025-01-05T06:41:11.075997Z","shell.execute_reply":"2025-01-05T06:41:11.085457Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Class\n0    284315\n1       492\nName: count, dtype: int64"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nclass_counts = df['Class'].value_counts()\nplt.figure(figsize = (6,6))\nclass_counts.plot.pie(autopct = '%1.1f%%', startangle = 90, colors = ['skyblue', 'salmon'])\nplt.title('Class Distribution')\nplt.legend(['Normal (0)', 'Fraud (1)'], loc = 'upper right')\nplt.ylabel('')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.087902Z","iopub.execute_input":"2025-01-05T06:41:11.088239Z","iopub.status.idle":"2025-01-05T06:41:11.264957Z","shell.execute_reply.started":"2025-01-05T06:41:11.088199Z","shell.execute_reply":"2025-01-05T06:41:11.263065Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"The dataset is hugely inbalanced, let's try to rectify that","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df.drop('Class', axis = 1), df['Class'], random_state = 42, test_size = 0.2)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.266440Z","iopub.execute_input":"2025-01-05T06:41:11.266922Z","iopub.status.idle":"2025-01-05T06:41:11.426120Z","shell.execute_reply.started":"2025-01-05T06:41:11.266876Z","shell.execute_reply":"2025-01-05T06:41:11.425027Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, f1_score, recall_score\n\ndef metrics(y_test, predictions, probabilities = False):\n    if probabilities:\n        predicted_classes = np.argmax(predictions, axis = 1)\n    else:\n        predicted_classes = predictions\n    accuracy = accuracy_score(y_test, predicted_classes)\n    print(f'Accuracy : {accuracy:.4f}')\n    confuse_matrix = confusion_matrix(y_test, predicted_classes)\n    print('Confuse Matrix : ',confuse_matrix)\n    precision = precision_score(y_test, predicted_classes)\n    print(f'Precision : {precision:4f}')\n    f1 = f1_score(y_test, predicted_classes, average = 'macro')\n    print(f'f1 Score : {f1:4f}')\n    recall = recall_score(y_test, predicted_classes)\n    print(f'Recall Score : {recall}')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.427162Z","iopub.execute_input":"2025-01-05T06:41:11.427423Z","iopub.status.idle":"2025-01-05T06:41:11.434249Z","shell.execute_reply.started":"2025-01-05T06:41:11.427385Z","shell.execute_reply":"2025-01-05T06:41:11.432984Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"#Base model\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\n\nlr.fit(X_train, y_train)\n\npredictions = lr.predict(X_test)\n\nmetrics(y_test, predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:11.435307Z","iopub.execute_input":"2025-01-05T06:41:11.435594Z","iopub.status.idle":"2025-01-05T06:41:16.668986Z","shell.execute_reply.started":"2025-01-05T06:41:11.435567Z","shell.execute_reply":"2025-01-05T06:41:16.667894Z"}},"outputs":[{"name":"stdout","text":"Accuracy : 0.9990\nConfuse Matrix :  [[56836    28]\n [   30    68]]\nPrecision : 0.708333\nf1 Score : 0.850260\nRecall Score : 0.6938775510204082\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"from imblearn.over_sampling import SMOTE\n\nsmt = SMOTE(random_state = 42)\n\n#Resampling inbalanced dataset and making it balanced using SMOTE\n\nX_resampled, y_resampled = smt.fit_resample(X_train, y_train)\n\nlr.fit(X_resampled, y_resampled)\n\npredictions = lr.predict(X_test)\n\nmetrics(y_test, predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:16.671851Z","iopub.execute_input":"2025-01-05T06:41:16.672377Z","iopub.status.idle":"2025-01-05T06:41:26.939727Z","shell.execute_reply.started":"2025-01-05T06:41:16.672341Z","shell.execute_reply":"2025-01-05T06:41:26.938595Z"}},"outputs":[{"name":"stdout","text":"Accuracy : 0.9827\nConfuse Matrix :  [[55891   973]\n [   11    87]]\nPrecision : 0.082075\nf1 Score : 0.570767\nRecall Score : 0.8877551020408163\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"The recall rate is increased but the precision is decreased by the sampling\n","metadata":{}},{"cell_type":"code","source":"class_counts = y_resampled.value_counts()\nplt.figure(figsize = (6,6))\nclass_counts.plot.pie(autopct = '%1.1f%%', startangle = 90, colors = ['skyblue', 'salmon'])\nplt.title('Class Distribution')\nplt.legend(['Normal (0)', 'Fraud (1)'], loc = 'upper right')\nplt.ylabel('')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:26.941211Z","iopub.execute_input":"2025-01-05T06:41:26.941532Z","iopub.status.idle":"2025-01-05T06:41:27.109739Z","shell.execute_reply.started":"2025-01-05T06:41:26.941505Z","shell.execute_reply":"2025-01-05T06:41:27.108198Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"from imblearn.over_sampling import ADASYN\n# Apply ADASYN\nadasyn = ADASYN(random_state=42)\n\nX_resampled, y_resampled = adasyn.fit_resample(X_train, y_train)\n\nlr.fit(X_resampled, y_resampled)\n\npredictions = lr.predict(X_test)\n\nmetrics(y_test, predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-05T06:41:27.111246Z","iopub.execute_input":"2025-01-05T06:41:27.111790Z","iopub.status.idle":"2025-01-05T06:41:35.954808Z","shell.execute_reply.started":"2025-01-05T06:41:27.111740Z","shell.execute_reply":"2025-01-05T06:41:35.953589Z"}},"outputs":[{"name":"stdout","text":"Accuracy : 0.9799\nConfuse Matrix :  [[55727  1137]\n [   10    88]]\nPrecision : 0.071837\nf1 Score : 0.561422\nRecall Score : 0.8979591836734694\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"Applying ADASYN method increased Recall but the precision is decreased","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}